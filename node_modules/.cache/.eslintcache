[{"/Users/mstars_lab2_18/Desktop/scoreboard/src/index.js":"1","/Users/mstars_lab2_18/Desktop/scoreboard/src/App.js":"2","/Users/mstars_lab2_18/Desktop/scoreboard/src/reportWebVitals.js":"3","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Player.js":"4","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Crown.js":"5","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Header.js":"6","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/AddPlayer.js":"7","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Counter.js":"8","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Stopwatch.js":"9","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Stats.js":"10","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/PlayerList.js":"11","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Context/index.js":"12"},{"size":500,"mtime":1647411815711,"results":"13","hashOfConfig":"14"},{"size":439,"mtime":1648451324654,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1647411815712,"results":"16","hashOfConfig":"14"},{"size":758,"mtime":1648447439574,"results":"17","hashOfConfig":"14"},{"size":607,"mtime":1647845854898,"results":"18","hashOfConfig":"14"},{"size":516,"mtime":1647840486485,"results":"19","hashOfConfig":"14"},{"size":658,"mtime":1648450566906,"results":"20","hashOfConfig":"14"},{"size":888,"mtime":1648451335269,"results":"21","hashOfConfig":"14"},{"size":1307,"mtime":1647421051487,"results":"22","hashOfConfig":"14"},{"size":712,"mtime":1648451326008,"results":"23","hashOfConfig":"14"},{"size":610,"mtime":1648447426361,"results":"24","hashOfConfig":"14"},{"size":2492,"mtime":1648448252332,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"66ok1z",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"29"},"/Users/mstars_lab2_18/Desktop/scoreboard/src/index.js",[],[],["66","67"],"/Users/mstars_lab2_18/Desktop/scoreboard/src/App.js",[],[],"/Users/mstars_lab2_18/Desktop/scoreboard/src/reportWebVitals.js",[],[],"/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Player.js",[],[],"/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Crown.js",[],[],"/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Header.js",[],[],"/Users/mstars_lab2_18/Desktop/scoreboard/src/components/AddPlayer.js",["68","69"],[],"import React, { useState } from \"react\";\nconst AddPlayer = () => {\n  const [state, setState] = useState(0);\n  const [handleSubmit, stateChange] = useState(1);\n  stateChange = (e) => {\n    setState({\n      value: e.target.value,\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addPlayer(state.value);\n\n    setState({\n      value: \"\",\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={stateChange}\n        value={state.value}\n        placeholder=\"Add player name\"\n      />\n      <input type=\"submit\" value=\"Add player\" />\n    </form>\n  );\n};\n\nexport default AddPlayer;\n","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Counter.js",[],[],"/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Stopwatch.js",["70"],[],"import React from \"react\";\n\nclass Stopwatch extends React.Component {\n  state = {\n    isRunning: false,\n    elapsedTime: 0,\n    previousTime: 0,\n  };\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n  tick = () => {\n    if (this.state.isRunning) {\n      const now = Date.now();\n      this.setState((prevState) => ({\n        previousTime: now,\n        elapsedTime: prevState.elapsedTime + (now - prevState.previousTime),\n      }));\n    }\n  };\n  resetTime = () => {\n    this.setState({ time: (this.state.elapsedTime = 0), isRunning: false });\n  };\n\n  handleStopwatch = () => {\n    this.setState((prevState) => ({\n      isRunning: !prevState.isRunning,\n    }));\n    if (!this.state.isRunning) {\n      this.setState({\n        previousTime: Date.now(),\n      });\n    }\n  };\n  render() {\n    const millis = Math.floor(this.state.elapsedTime / 100);\n    return (\n      <div className=\"stopwatch\">\n        <h2>Stopwatch</h2>\n        <span className=\"stopwatch-time\">{millis}</span>\n        <button onClick={this.handleStopwatch}>\n          {this.state.isRunning ? \"Stop\" : \"Start\"}\n        </button>\n        <button onClick={this.resetTime}>Reset</button>\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;\n","/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Stats.js",[],[],"/Users/mstars_lab2_18/Desktop/scoreboard/src/components/PlayerList.js",[],[],"/Users/mstars_lab2_18/Desktop/scoreboard/src/components/Context/index.js",["71"],[],"import React from \"react\";\n\nconst ScoreboardContext = React.createContext();\nconst Provider = ScoreboardContext.Provider;\n\nexport class Hangagch extends React.Component {\n  state = {\n    players: [\n      {\n        name: \"Enkhtuvshin\",\n        score: 0,\n        id: 1,\n      },\n      {\n        name: \"Dulam\",\n        score: 0,\n        id: 2,\n      },\n      {\n        name: \"Jambal\",\n        score: 0,\n        id: 3,\n      },\n      {\n        name: \"Jambal1\",\n        score: 0,\n        id: 4,\n      },\n      {\n        name: \"Jambal2\",\n        score: 0,\n        id: 5,\n      },\n    ],\n  };\n\n  lastPlayerID = this.state.players.length - 1;\n  playersId = this.state.players[this.lastPlayerID].id;\n  changeScore = (delta, index) => {\n    this.setState((prevState) => {\n      const updatedPlayers = [...prevState.players];\n      const updatedPlayer = { ...updatedPlayers[index] };\n\n      updatedPlayer.score += delta;\n\n      updatedPlayers[index] = updatedPlayer;\n\n      return {\n        players: updatedPlayers,\n      };\n    });\n  };\n  editName = (name, index) => {\n    this.setState((prevState) => {\n      const updatedPlayers = [...prevState.players];\n      const updatedPlayer = {\n        ...updatedPlayer[index],\n      };\n      updatedPlayer.name = name;\n      updatedPlayers[index] = updatedPlayer;\n      return {\n        players: updatedPlayers,\n      };\n    });\n  };\n  getHighScore = () => {\n    const score = this.state.players.map((p) => p.score);\n    const highscore = Math.max(...score);\n    if (highscore > 0) {\n      return highscore;\n    } else {\n      return null;\n    }\n  };\n\n  removePlayer = (paraID) => {\n    this.setState((prevState) => {\n      return {\n        players: prevState.players.filter((p) => p.id !== paraID),\n      };\n    });\n  };\n\n  handleAddPlayer = (name) => {\n    this.setState({\n      players: [\n        ...this.state.players,\n        {\n          name: name,\n          score: 0,\n          id: (this.playersId += 1),\n        },\n      ],\n    });\n  };\n  render() {\n    const highscore = this.getHighScore();\n    return (\n      <Provider\n        value={{\n          players: this.state.players,\n          action: {\n            handleAddPlayer: this.handleAddPlayer,\n            editName: this.editName,\n            removePlayer: this.removePlayer,\n            changeScore: this.changeScore,\n          },\n          highscore: highscore,\n        }}\n      >\n        {this.props.children}\n      </Provider>\n    );\n  }\n}\nexport const Consumer = ScoreboardContext.Consumer;\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":5,"column":3,"nodeType":"78","messageId":"79","endLine":5,"endColumn":14},{"ruleId":"76","severity":1,"message":"80","line":10,"column":3,"nodeType":"78","messageId":"79","endLine":10,"endColumn":15},{"ruleId":"81","severity":1,"message":"82","line":26,"column":28,"nodeType":"83","messageId":"84","endLine":26,"endColumn":38},{"ruleId":"85","severity":1,"message":"86","line":57,"column":12,"nodeType":"78","messageId":"87","endLine":57,"endColumn":25},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-const-assign","'stateChange' is constant.","Identifier","const","'handleSubmit' is constant.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","no-use-before-define","'updatedPlayer' was used before it was defined.","usedBeforeDefined","no-global-assign","no-unsafe-negation"]